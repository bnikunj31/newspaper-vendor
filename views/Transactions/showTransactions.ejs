<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link
      rel="stylesheet"
      href="/node_modules/bootstrap/dist/css/bootstrap.min.css"
    />
    <title>All Transactions</title>
    <link rel="stylesheet" href="/styles.css" />
    <style>
      .container {
        background: white;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
      }
      table thead th {
        cursor: pointer;
      }
      .highlight {
        background-color: #e2e6ea !important;
      }
    </style>
  </head>
  <body>
    <!-- Navbar -->
    <%- include('../navbar.html') %>

    <div class="container my-5">
      <div class="row mb-4">
        <div
          class="col-md-6 d-flex align-items-center justify-content-between w-100"
        >
          <h2 class="text-primary">All Transactions</h2>
          <div class="col-md-6 text-end d-flex gap-3">
            <input
              id="searchInput"
              class="form-control w-75"
              type="text"
              placeholder="Filter by Customer or Newspaper..."
            />
            <input
              id="dateInput"
              class="form-control w-25"
              type="date"
              placeholder="Filter by Transaction Date..."
            />
          </div>
          <a
            href="/transactions/singletransaction"
            class="btn btn-outline-primary"
            >Make Single Transaction</a
          >
        </div>
      </div>
      <table class="table table-bordered table-hover table-striped">
        <thead class="table-dark">
          <tr>
            <th data-sort="customer">Customer<i class="fas fa-sort"></i></th>
            <th data-sort="newspaper">Newspaper<i class="fas fa-sort"></i></th>
            <th>Attendance</th>
            <th>Days</th>
            <th>Price</th>
            <th>Transaction Date</th>
            <th>Action</th>
          </tr>
        </thead>
        <tbody id="userTableBody">
          <% if(data.length > 0) { %> <% data.forEach(row => { %>
          <tr>
            <td><%= row.customerName %></td>
            <td><%= row.newspaperName %> (<%= row.newspaperCode %>)</td>
            <td class="text-center">
              <input type="checkbox" class="form-check-input custom-checkbox"
              name="status" <%= row.attendance == 1 ? "checked" : "" %>
              id="status" disabled />
            </td>
            <td><%= row.combinationDays %></td>
            <td><%= row.price %></td>
            <td><%= row.transactionDate %></td>
            <td>
              <a
                href="/transactions/update/<%= row.transaction_id %>"
                class="btn btn-outline-warning"
                >Update</a
              >
            </td>
          </tr>
          <% }) %> <% } %>
        </tbody>
      </table>
      <nav>
        <ul class="pagination justify-content-center" id="pagination"></ul>
      </nav>
    </div>
    <script src="/node_modules/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script>
      // Filter functionality
      const searchInput = document.getElementById("searchInput");
      const dateInput = document.getElementById("dateInput");

      function filterRows() {
        const searchFilter = searchInput.value.toLowerCase();
        const dateFilter = dateInput.value; // Date format: YYYY-MM-DD
        const rows = document.querySelectorAll("#userTableBody tr");

        rows.forEach((row) => {
          const customerName = row.cells[0].textContent.toLowerCase();
          const newspaperName = row.cells[1].textContent.toLowerCase();
          const transactionDate = row.cells[5].textContent;

          const matchesSearch =
            customerName.includes(searchFilter) ||
            newspaperName.includes(searchFilter);
          const matchesDate = dateFilter
            ? transactionDate.startsWith(dateFilter)
            : true;

          row.style.display = matchesSearch && matchesDate ? "" : "none";
        });
      }

      // Add event listeners for filter inputs
      searchInput.addEventListener("keyup", filterRows);
      dateInput.addEventListener("change", filterRows);

      // Pagination
      const rowsPerPage = 20;
      let currentPage = 1;
      const rows = document.querySelectorAll("#userTableBody tr");
      const pagination = document.getElementById("pagination");

      function displayRows(page) {
        currentPage = page;
        rows.forEach((row, index) => {
          row.style.display =
            index >= (currentPage - 1) * rowsPerPage &&
            index < currentPage * rowsPerPage
              ? ""
              : "none";
        });
      }

      function setupPagination() {
        const pageCount = Math.ceil(rows.length / rowsPerPage);
        pagination.innerHTML = "";
        for (let i = 1; i <= pageCount; i++) {
          const li = document.createElement("li");
          li.classList.add("page-item");
          li.innerHTML = `<a class="page-link" href="#">${i}</a>`;
          li.addEventListener("click", function (e) {
            e.preventDefault();
            displayRows(i);
            document
              .querySelectorAll(".page-item")
              .forEach((item) => item.classList.remove("active"));
            li.classList.add("active");
          });
          if (i === currentPage) {
            li.classList.add("active");
          }
          pagination.appendChild(li);
        }
      }

      // Sorting functionality
      const headers = document.querySelectorAll("th[data-sort]");
      headers.forEach((header) => {
        header.addEventListener("click", () => {
          const sortKey = header.getAttribute("data-sort");
          const sortedRows = Array.from(rows).sort((a, b) => {
            const valA = a
              .querySelector(`td:nth-child(${header.cellIndex + 1})`)
              .textContent.trim();
            const valB = b
              .querySelector(`td:nth-child(${header.cellIndex + 1})`)
              .textContent.trim();
            return isNaN(valA) || isNaN(valB)
              ? valA.localeCompare(valB)
              : parseFloat(valA) - parseFloat(valB);
          });
          sortedRows.forEach((row) =>
            document.querySelector("#userTableBody").appendChild(row)
          );
        });
      });

      // Initial setup
      displayRows(1);
      setupPagination();
    </script>
  </body>
</html>
