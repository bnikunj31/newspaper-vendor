<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link
      rel="stylesheet"
      href="/node_modules/bootstrap/dist/css/bootstrap.min.css"
    />
    <link
      href="/node_modules/select2/dist/css/select2.min.css"
      rel="stylesheet"
    />
    <title>All Users</title>
    <link rel="stylesheet" href="/styles.css" />
    <style>
      .container {
        background: white;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
      }
      table thead th {
        cursor: pointer;
      }
      .highlight {
        background-color: #e2e6ea !important;
      }
      .filter-container {
        display: flex;
        align-items: center;
        gap: 15px;
      }
      .select2-container {
        width: 200px !important;
      }
    </style>
  </head>
  <body>
    <!-- Navbar -->
    <%- include('../navbar.html') %>

    <div class="container my-5">
      <div class="row mb-4">
        <div
          class="col-md-12 d-flex align-items-center justify-content-between w-100"
        >
          <h2 class="text-primary">All Customers</h2>

          <!-- Colony Filter -->
          <input
            type="text"
            class="form-control w-25"
            list="colonies"
            id="colonyFilter"
            placeholder="Search Colonies"
          />
          <datalist id="colonies">
            <option value="">All Colonies</option>
            <% const uniqueColonies = [...new Set(rows.map(colony =>
            colony.colony))]; uniqueColonies.forEach(colony => { %>
            <option value="<%= colony %>"><%= colony %></option>
            <% }) %>
          </datalist>

          <!-- Search Users -->
          <input
            type="text"
            class="form-control w-25"
            list="users"
            id="searchUserDropdown"
            placeholder="Search Customers"
          />
          <datalist id="users">
            <option value="">Search users...</option>
            <% const uniqueNames = [...new Set(rows.map(row =>
            row.customerName))]; uniqueNames.forEach(name => { %>
            <option value="<%= name %>"><%= name %></option>
            <% }) %>
          </datalist>

          <a href="/add" class="btn btn-outline-primary">Add Customer</a>
        </div>
        <div class="filter-container mt-3">
          <span class="fw-bolder">Filter:</span>
          <!-- Route Filter -->
          <input
            id="routeFilter"
            class="form-control w-25"
            type="number"
            min="1"
            placeholder="Filter by Route"
          />

          <!-- Last Active Filter -->
          <input
            id="lastActiveFilter"
            class="form-control w-25"
            type="date"
            placeholder="Filter by Last Active (YYYY-MM-DD)"
          />

          <!-- Paid Filter -->
          <input
            id="paidFilter"
            class="form-control w-25"
            type="number"
            min="0"
            placeholder="Filter by Paid"
          />

          <!-- Due Filter -->
          <input
            id="dueFilter"
            class="form-control w-25"
            type="number"
            min="0"
            placeholder="Filter by Due"
          />

          <!-- Defaulter Filter Checkbox -->
          <div class="form-check">
            <input
              type="checkbox"
              id="defaulterFilter"
              class="form-check-input"
            />
            <label class="form-check-label" for="defaulterFilter"
              >Defaulters</label
            >
          </div>
        </div>
      </div>
      <table class="table table-bordered table-hover table-striped">
        <thead class="table-dark">
          <tr>
            <th data-sort="id">Id <i class="fas fa-sort"></i></th>
            <th data-sort="name">Name <i class="fas fa-sort"></i></th>
            <th>Address</th>
            <th>Contact Number</th>
            <th>Colony</th>
            <th data-sort="paid">Paid <i class="fas fa-sort"></i></th>
            <th data-sort="due">Due <i class="fas fa-sort"></i></th>
            <th>Route</th>
            <th>Last Active</th>
            <th>Defaulter</th>
            <th>Action</th>
          </tr>
        </thead>
        <tbody id="userTableBody">
          <% if(rows.length > 0) { %> <% rows.forEach(row => { %>
          <tr>
            <td><%= row.customerId %></td>
            <td><%= row.customerName %></td>
            <td><%= row.address %></td>
            <td><%= row.contactNumber %></td>
            <td><%= row.colony %></td>
            <td><%= row.paid %></td>
            <td><%= row.due %></td>
            <td><%= row.route %></td>
            <td><%= row.lastActive %></td>
            <td class="text-center">
              <input type="checkbox" name="defaulter" class="check" disabled
              id="defaulter" <%= row.defaulter === 1 ? "checked" : "" %> >
            </td>
            <td>
              <a
                href="/update/<%= row.customerId %>"
                class="btn btn-sm btn-outline-warning"
                >Update</a
              >
              <% if(row.disable === 0 ) { %>
              <button
                class="btn btn-sm btn-outline-dark"
                data-bs-toggle="modal"
                data-bs-target="#disableModal<%= row.customerId %>"
              >
                Disable
              </button>
              <% } else { %>
              <button
                class="btn btn-sm btn-outline-success"
                data-bs-toggle="modal"
                data-bs-target="#enableModal<%= row.customerId %>"
              >
                Enable
              </button>
              <button
                class="btn btn-sm btn-outline-danger"
                data-bs-toggle="modal"
                data-bs-target="#deleteModal<%= row.customerId %>"
              >
                Delete
              </button>
              <% } %>
            </td>
          </tr>
          <% }) %> <% } %>
        </tbody>
      </table>
      <nav>
        <ul class="pagination justify-content-center" id="pagination"></ul>
      </nav>
    </div>

    <script src="/node_modules/jquery/dist/jquery.min.js"></script>
    <script src="/node_modules/select2/dist/js/select2.min.js"></script>
    <script src="/node_modules/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script>
      document.addEventListener("DOMContentLoaded", function () {
        const colonyFilter = document.getElementById("colonyFilter");
        const searchUserDropdown =
          document.getElementById("searchUserDropdown");
        const userTableBody = document.getElementById("userTableBody");

        const routeFilter = document.getElementById("routeFilter");
        const lastActiveFilter = document.getElementById("lastActiveFilter");
        const paidFilter = document.getElementById("paidFilter");
        const dueFilter = document.getElementById("dueFilter");
        const defaulterFilter = document.getElementById("defaulterFilter");

        // Function to apply all filters
        function applyFilters() {
          const colonyValue = colonyFilter.value.toLowerCase();
          const userValue = searchUserDropdown.value.toLowerCase();
          const routeValue = routeFilter.value;
          const lastActiveValue = lastActiveFilter.value;
          const paidValue = paidFilter.value;
          const dueValue = dueFilter.value;
          const defaulterChecked = defaulterFilter.checked;

          const rows = Array.from(userTableBody.getElementsByTagName("tr"));

          rows.forEach((row) => {
            const cells = row.getElementsByTagName("td");
            const nameText = cells[1].textContent.toLowerCase();
            const addressText = cells[2].textContent.toLowerCase();
            const colonyText = cells[4].textContent.toLowerCase();
            const paidText = cells[5].textContent;
            const dueText = cells[6].textContent;
            const routeText = cells[7].textContent;
            const lastActiveText = cells[8].textContent;
            const isDefaulter =
              cells[9].getElementsByTagName("input")[0].checked;

            // Apply filters
            let showRow = true;

            if (colonyValue && colonyText !== colonyValue) {
              showRow = false;
            }

            if (userValue && !nameText.includes(userValue)) {
              showRow = false;
            }

            if (routeValue && routeText !== routeValue) {
              showRow = false;
            }

            // Check if the last active date is valid and compare
            if (lastActiveValue) {
              const lastActiveDate = new Date(lastActiveText);
              const filterDate = new Date(lastActiveValue);
              if (lastActiveDate < filterDate) {
                showRow = false;
              }
            }

            // Check if the paid value is valid and compare
            if (paidValue && parseFloat(paidText) < parseFloat(paidValue)) {
              showRow = false;
            }

            // Check if the due value is valid and compare
            if (dueValue) {
              const parsedDueValue = parseFloat(dueValue);
              const parsedDueText = parseFloat(dueText);

              // Show rows where the due amount is less than or equal to the input value
              if (parsedDueText < parsedDueValue) {
                showRow = false;
              }
            }

            if (defaulterChecked && !isDefaulter) {
              showRow = false;
            }

            // Show or hide the row based on filter results
            row.style.display = showRow ? "" : "none";
          });
        }

        // Attach event listeners to each filter
        colonyFilter.addEventListener("change", applyFilters);
        searchUserDropdown.addEventListener("input", applyFilters);
        routeFilter.addEventListener("input", applyFilters);
        lastActiveFilter.addEventListener("input", applyFilters);
        paidFilter.addEventListener("input", applyFilters);
        dueFilter.addEventListener("input", applyFilters);
        defaulterFilter.addEventListener("change", applyFilters);

        // Update the user dropdown when the colony filter changes
        function filterUsersByColony() {
          const colonyValue = colonyFilter.value.toLowerCase();
          const rows = userTableBody.getElementsByTagName("tr");
          let filteredNames = new Set(); // Use Set to avoid duplicates

          Array.from(rows).forEach((row) => {
            const cells = row.getElementsByTagName("td");
            const colonyText = cells[4].textContent.toLowerCase();
            const nameText = cells[1].textContent;

            if (colonyValue === "" || colonyText === colonyValue) {
              filteredNames.add(nameText);
            }
          });

          updateSearchUserDropdown(filteredNames);
        }

        function updateSearchUserDropdown(filteredNames) {
          const usersDataList = document.getElementById("users");
          usersDataList.innerHTML = ""; // Clear the existing options

          // Add the default 'search users' option
          const defaultOption = document.createElement("option");
          defaultOption.value = "";
          defaultOption.textContent = "Search users...";
          usersDataList.appendChild(defaultOption);

          // Append the filtered user options
          filteredNames.forEach((name) => {
            const option = document.createElement("option");
            option.value = name;
            usersDataList.appendChild(option);
          });
        }

        // Event listener for colony filter
        colonyFilter.addEventListener("change", function () {
          filterUsersByColony();
          applyFilters(); // Apply filters after updating the user dropdown
        });
      });
    </script>
  </body>
</html>

<!-- <script>
      document.addEventListener("DOMContentLoaded", function () {
        const colonyFilter = document.getElementById("colonyFilter");
        const searchUserDropdown =
          document.getElementById("searchUserDropdown");
        const userTableBody = document.getElementById("userTableBody");

        function filterUsersByColony() {
          const colonyValue = colonyFilter.value;
          const rows = userTableBody.getElementsByTagName("tr");
          let filteredNames = new Set(); // Use Set to avoid duplicates

          // Filter users by selected colony
          Array.from(rows).forEach((row) => {
            const cells = row.getElementsByTagName("td");
            const colonyText = cells[4].textContent;
            const nameText = cells[1].textContent;

            if (colonyValue === "" || colonyText === colonyValue) {
              filteredNames.add(nameText);
            }
          });

          // Update the datalist for users with filtered names
          updateSearchUserDropdown(filteredNames);
        }

        function updateSearchUserDropdown(filteredNames) {
          const usersDataList = document.getElementById("users");
          usersDataList.innerHTML = ""; // Clear the existing options

          // Add the default 'search users' option
          const defaultOption = document.createElement("option");
          defaultOption.value = "";
          defaultOption.textContent = "Search users...";
          usersDataList.appendChild(defaultOption);

          // Append the filtered user options
          filteredNames.forEach((name) => {
            const option = document.createElement("option");
            option.value = name;
            usersDataList.appendChild(option);
          });
        }

        // Event listener for colony filter
        colonyFilter.addEventListener("change", function () {
          filterUsersByColony();
        });
      });
    </script> -->

<!-- <script>
      document.addEventListener("DOMContentLoaded", function () {
        const colonyFilter = document.getElementById("colonyFilter");
        const routeFilter = document.getElementById("routeFilter");
        const searchUserDropdown =
          document.getElementById("searchUserDropdown");
        const lastActiveFilter = document.getElementById("lastActiveFilter");
        const paidFilter = document.getElementById("paidFilter");
        const dueFilter = document.getElementById("dueFilter");
        const defaulterFilter = document.getElementById("defaulterFilter");
        const userTableBody = document.getElementById("userTableBody");
        const pagination = document.getElementById("pagination");

        const rowsPerPage = 50;
        let currentPage = 1;

        function filterUsersByColony() {
          const colonyValue = colonyFilter.value;
          const rows = userTableBody.getElementsByTagName("tr");
          let filteredNames = new Set(); // Using Set to avoid duplicates

          Array.from(rows).forEach((row) => {
            const cells = row.getElementsByTagName("td");
            const colonyText = cells[4].textContent;
            const nameText = cells[1].textContent;

            if (colonyValue === "" || colonyText === colonyValue) {
              filteredNames.add(nameText);
            }
          });

          updateSearchUserDropdown(filteredNames);
        }

        function updateSearchUserDropdown(filteredNames) {
          searchUserDropdown.innerHTML =
            '<option value="">Search users...</option>'; // Reset dropdown

          filteredNames.forEach((name) => {
            const option = document.createElement("option");
            option.value = name;
            option.textContent = name;
            searchUserDropdown.appendChild(option);
          });
        }

        function filterTable() {
          const colonyValue = colonyFilter.value;
          const routeValue = routeFilter.value.toLowerCase();
          const searchUserValue = searchUserDropdown.value.toLowerCase();
          const lastActiveValue = lastActiveFilter.value;
          const paidValue = paidFilter.value;
          const dueValue = dueFilter.value;
          const isDefaulterChecked = defaulterFilter.checked;

          const rows = userTableBody.getElementsByTagName("tr");
          let visibleCount = 0;

          Array.from(rows).forEach((row) => {
            const cells = row.getElementsByTagName("td");
            const colonyText = cells[4].textContent;
            const routeText = cells[7].textContent;
            const nameText = cells[1].textContent;
            const lastActiveText = cells[8].textContent;
            const paidText = cells[5].textContent;
            const dueText = cells[6].textContent;
            const isDefaulter = cells[9].querySelector("input").checked;

            const isColonyMatch =
              colonyValue === "" || colonyText === colonyValue;
            const isRouteMatch = routeText.toLowerCase().includes(routeValue);
            const isNameMatch =
              searchUserValue === "" ||
              nameText.toLowerCase() === searchUserValue;
            const isLastActiveMatch =
              lastActiveValue === "" ||
              lastActiveText.includes(lastActiveValue);
            const isPaidMatch =
              paidValue === "" || paidText.includes(paidValue);
            const isDueMatch = dueValue === "" || dueText.includes(dueValue);
            const isDefaulterMatch = !isDefaulterChecked || isDefaulter;

            const isVisible =
              isColonyMatch &&
              isRouteMatch &&
              isNameMatch &&
              isLastActiveMatch &&
              isPaidMatch &&
              isDueMatch &&
              isDefaulterMatch;

            row.style.display = isVisible ? "" : "none";
            if (isVisible) visibleCount++;
          });

          setupPagination(visibleCount);
        }

        function setupPagination(visibleCount) {
          const totalPages = Math.ceil(visibleCount / rowsPerPage);
          pagination.innerHTML = "";

          for (let i = 1; i <= totalPages; i++) {
            const pageItem = document.createElement("li");
            pageItem.className =
              "page-item" + (i === currentPage ? " active" : "");
            const pageLink = document.createElement("a");
            pageLink.className = "page-link";
            pageLink.href = "#";
            pageLink.textContent = i;

            pageLink.addEventListener("click", function (e) {
              e.preventDefault();
              displayRows(i);
            });

            pageItem.appendChild(pageLink);
            pagination.appendChild(pageItem);
          }

          displayRows(currentPage);
        }

        function displayRows(page) {
          currentPage = page;
          const rows = userTableBody.getElementsByTagName("tr");
          const visibleRows = Array.from(rows).filter(
            (row) => row.style.display !== "none"
          );

          visibleRows.forEach((row, index) => {
            row.style.display =
              index < rowsPerPage * page && index >= rowsPerPage * (page - 1)
                ? ""
                : "none";
          });
        }

        // Event listeners for filters
        colonyFilter.addEventListener("change", function () {
          filterUsersByColony();
          filterTable();
        });
        routeFilter.addEventListener("input", filterTable);
        searchUserDropdown.addEventListener("change", filterTable);
        lastActiveFilter.addEventListener("input", filterTable);
        paidFilter.addEventListener("input", filterTable);
        dueFilter.addEventListener("input", filterTable);
        defaulterFilter.addEventListener("change", filterTable);

        filterTable();
      });
    </script> -->
